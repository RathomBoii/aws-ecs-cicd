name: "CICD - ECS Backend Automation Pipeline Test"

on:
    push:
        branches: [main]
        paths:
            - "/backend/*"
        # paths-ignore:
        #     - "**.md"
        #     - ".github/workflows/**"
        #     - "Dockerfile"
    pull_request:
        branches: [main]
        paths:
            - "/backend/*"
        # paths-ignore:
        #     - "**.md"
        #     - ".github/workflows/**"
        #     - "Dockerfile"

    # enable manually start workflow
    workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1  
  ECR_REPOSITORY: ecs-backend-test                     # set this to your Amazon ECR repository name
  ECS_SERVICE: ecs-backend-test-service              # set this to your Amazon ECS service name
  ECS_CLUSTER: ecs-test-cluster 
  ECS_TASK_DEFINITION: .github/ecs/ecs-backend-test.json  # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: ecs-backend-test

permissions:
    id-token: write # This is required for requesting the JWT
    contents: write # This is required for actions/checkout

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

# ref: https://github.com/aws-actions/configure-aws-credentials
      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TEST_GITHUB_RUNNER_OIDC_ROLE }}
          role-session-name: GitHubActions
          aws-region: ${{ env.AWS_REGION }}

# ref: https://github.com/aws-actions/amazon-ecr-login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # allow other step can refer to this image   
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          # TAG dev
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:dev
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev
          # TAG LATEST
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TEST_GITHUB_RUNNER_OIDC_ROLE }}
          role-session-name: GitHubActions
          aws-region: ${{ env.AWS_REGION }}
    
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true